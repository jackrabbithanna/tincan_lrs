<?php

/**
 * @file
 * Defines menu items common to the TinCan LRS modules.
 */


/**
 * Implements hook_menu().
 */
function tincan_lrs_menu() {
  $items = array();

  // Top level "LRS" container.
  $items['admin/lrs'] = array(
    'title' => 'LRS',
    'description' => 'Administer your LRS.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  $items['admin/lrs/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure settings and business rules for your LRS.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 50,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  $items['admin/lrs/config/settings'] = array(
    'title' => 'General settings',
    'description' => 'Configure the general TinCan LRS settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tincan_lrs_settings_form'),
    'access arguments' => array('configure lrs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tincan_lrs.admin.inc',
  );

  return $items;
}

function tincan_lrs_permission() {
  $permissions = array(
    'configure lrs' => array(
      'title' => t('Configure LRS settings'),
      'description' => t('Allows users to configure the TinCan LRS.'),
      'restrict access' => TRUE,
    ),
    'view tincan statements' => array(
      'title' => t('View tincan statements'),
      'description' => t('Allows users to view Tincan Statements'),
      'restrict access' => TRUE,
    ),
    'view tincan agents' => array(
      'title' => t('View tincan agents'),
      'description' => t('Allows users to view Tincan Agents'),
      'restrict access' => TRUE,
    ),
    'view tincan activities' => array(
      'title' => t('View tincan activities'),
      'description' => t('Allows users to view Tincan Activities'),
      'restrict access' => TRUE,
    ),
    'view tincan states' => array(
      'title' => t('View tincan states'),
      'description' => t('Allows users to view Tincan States'),
      'restrict access' => TRUE,
    ),
    'view tincan activity profiles' => array(
      'title' => t('View Tincan Activity Profiles'),
      'description' => t('Allows users to view Tincan Activity Profiles'),
      'restrict access' => TRUE,
    ),
    'view tincan agent profiles' => array(
      'title' => t('View Tincan Agent Profiles'),
      'description' => t('Allows users to view Tincan Agent Profiles'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implementation of hook_services_resources().
 */
function tincan_lrs_services_resources() {
  return array(
    'statements' => array(
      
      'retrieve' => array(
        'help' => 'Statement API GET',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.statements',
        ),
        'callback' => '_tincan_lrs_statements_get_handler',
        'access callback' => '_tincan_lrs_statements_get_handler_access',
        'access arguments' => array('get'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'statementId',
            'type' => 'string',
            'source' => array('path' => '0'),
            'optional' => TRUE,
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end retrieve array
     
      'create'=> array(
        'help' => 'Statement API POST',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.statements',
        ),
        'callback' => '_tincan_lrs_statements_post_handler',
        'access callback' => '_tincan_lrs_statements_post_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The statement data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'method',
            'type' => 'string',
            'source' => array('param' => 'method'),
            'optional' => TRUE,
            'default value' => 'none',
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end create array
      
      'update' => array(
        'help' => 'Statement API PUT',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.statements',
        ),
        'callback' => '_tincan_lrs_statements_put_handler',
        'access callback' => '_tincan_lrs_statements_put_handler_access',
        'access arguments' => array('put'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'statementId',
            'type' => 'string',
            'source' => array('path' => '0'),
            'optional' => TRUE,
            'default value' => 'none',
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The statement data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end update array
      'index' => array(
        'help' => 'Statement API GET Index',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.statements',
        ),
        'callback' => '_tincan_lrs_statements_index_handler',
        'access callback' => '_tincan_lrs_statements_get_handler_access',
        'access arguments' => array('get'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ),
    ), // end statements array
    
    
    'activities' => array(
      'retrieve'=> array(
        'help' => 'Activities GET',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.activities',
        ),
        'callback' => '_tincan_lrs_activities_get_handler',
        'access callback' => '_tincan_lrs_activities_get_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
           array(
             'name' => 'activityId',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
           array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), //end args array
      ), // end retrieve array
      
      'update'=> array(
        'help' => 'Activities API PUT',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.activities',
        ),
        'callback' => '_tincan_lrs_activities_put_handler',
        'access callback' => '_tincan_lrs_activities_put_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
             'name' => 'activityType',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The activities data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end update array
      
      'create'=> array(
        'help' => 'Activities API POST',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.activities',
        ),
        'callback' => '_tincan_lrs_activities_post_handler',
        'access callback' => '_tincan_lrs_activities_post_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The activities data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
             'name' => 'activityType',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
        ), // end args array
      ), // end create array
      
      'index'=> array(
        'help' => 'Activities Index',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.activities',
        ),
        'callback' => '_tincan_lrs_activities_index_handler',
        'access callback' => '_tincan_lrs_activities_index_handler_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
           array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), //end args array
      ), // end retrieve array
      
      'delete'=> array(
        'help' => 'Activities API Delete',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.activities',
        ),
        'callback' => '_tincan_lrs_activities_delete_handler',
        'access callback' => '_tincan_lrs_activities_delete_handler_access',
        'access arguments' => array('delete'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
             'name' => 'activityType',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The activities data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end delete array
    ), //end activities array
    
    
    'agents' => array(
      'retrieve'=> array(
        'help' => 'Agents GET',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.agents',
        ),
        'callback' => '_tincan_lrs_agents_get_handler',
        'access callback' => '_tincan_lrs_agents_get_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
           array(
             'name' => 'agentId',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
           array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), //end args array
      ), // end retrieve array
      
       'update'=> array(
        'help' => 'Agents API PUT',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.agents',
        ),
        'callback' => '_tincan_lrs_agents_put_handler',
        'access callback' => '_tincan_lrs_agents_put_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
             'name' => 'agentType',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The agents data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end update array
      
      'create'=> array(
        'help' => 'Agents API POST',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.agents',
        ),
        'callback' => '_tincan_lrs_agents_post_handler',
        'access callback' => '_tincan_lrs_agents_post_handler_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The agents data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
             'name' => 'agentType',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
        ), // end args array
      ), // end create array
      
      'index'=> array(
        'help' => 'Agents Index',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.agents',
        ),
        'callback' => '_tincan_lrs_agents_index_handler',
        'access callback' => '_tincan_lrs_agents_index_handler_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
           array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), //end args array
      ), // end index array
      
      'delete'=> array(
        'help' => 'Agents API Delete',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.agents',
        ),
        'callback' => '_tincan_lrs_agents_delete_handler',
        'access callback' => '_tincan_lrs_agents_delete_handler_access',
        'access arguments' => array('delete'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
             'name' => 'agentType',
             'type' => 'string',
             'source' => array('path' => '0'),
             'optional' => TRUE,
             'default value' => '0',
           ),
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
          array(
            'name' => 'data',
            'type' => 'struct',
            'description' => 'The activities data object',
            'source' => 'data',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ), // end args array
      ), // end delete array
    ), //end agents array
    
    
    'about' => array(
      'index' => array(
        'help' => 'TinCan LRS About resource',
        'file' => array(
          'type' => 'inc',
          'module' => 'tincan_lrs',
          'name' => 'services/tincan_lrs.services.about',
        ),
        'callback' => '_tincan_lrs_about_index_handler',
        'access callback' => '_tincan_lrs_about_index_handler_access',
        'access arguments' => array('about'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'parameters',
            'type' => 'array',
            'description' => '',
            'source' => 'param',
            'optional' => TRUE,
            'default value' => array(),
          ),
        ),
      ), //end index 
     ), //end about resource
  ); //end return array
    
}

/**
 * Triggered when the REST server request a list of supported response formats.
 *
 * @param array $formatters
 *  An associative array of formatter info arrays keyed by type extension. The
 *  formatter info specifies an array of 'mime types' that corresponds to the
 *  output format; a 'formatter class' class implements ServicesFormatterInterface
 *  and is responsible for encoding the output.
 * @return void
 */
function tincan_lrs_rest_server_response_formatters_alter(&$formatters) {
  $formatters['xapi'] = array(
        'mime types' => array('application/json', 'text/javascript'),
        'formatter class' => 'ServicesTinCanFormatter',
      );
}

/**
 * Triggered when the REST server request a list of available request parsers.
 *
 * @param array $parsers
 *  An associative array of parser callbacks keyed by mime-type.
 * @return void
 */
 /*
function tincan_lrs_rest_server_request_parsers_alter(&$parsers) {
  $parsers['application/json'] = 'ServicesTinCanParserJSON';
}
*/
/**
 * Allow to alter arguments before they are passed to service callback.
 *
 * @param $controller
 *   Controller definition
 * @param $args
 *   Array of arguments
 * @param $options
 *
 * @see services_controller_execute()
 * @see services.runtime.inc
 */
function tincan_lrs_services_request_preprocess_alter($controller, &$args, $options) {
  watchdog('request preprocess alter hook', 'controller: <pre>%d</pre>', array('%d' => print_r($controller,1)), WATCHDOG_DEBUG);
  watchdog('request preprocess alter hook', 'args: <pre>%d</pre>', array('%d' => print_r($args,1)), WATCHDOG_DEBUG);
  watchdog('request preprocess alter hook', 'options: <pre>%d</pre>', array('%d' => print_r($options,1)), WATCHDOG_DEBUG);

}

function tincan_lrs_entity_info() {
// Tincan Statement Entity definition
  $return['tincan_statement'] = array(
    'label' => t('Tincan Statement'),
    'entity class' => 'TincanStatement',
    'controller class' => 'TincanStatementController',
    'metadata controller class' => 'TincanStatementMetadataController',
    'views controller class' => 'TincanStatementDefaultViewsController',
    'extra fields controller class' => 'TincanStatementExtraFieldsController',
    'base table' => 'tincan_statement',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'statement_id' => 'statement_id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'tincan_lrs_statement_create',
    'access callback' => 'tincan_lrs_tincan_statement_access',
    'module' => 'tincan_lrs',
    'admin ui' => array(
        'path' => 'tincan_statement',
        'controller class' => 'TincanStatementUIController',
       ),
  );
  
// Tincan Agent entity definition
 $return['tincan_agent'] = array(
    'label' => t('Tincan Agent'),
    'entity class' => 'TincanAgent',
    'controller class' => 'TincanAgentController',
    'metadata controller class' => 'TincanAgentMetadataController',
    'views controller class' => 'TincanAgentDefaultViewsController',
    'extra fields controller class' => 'TincanAgentExtraFieldsController',
    'base table' => 'tincan_agent',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'tincan_lrs_agent_create',
    'access callback' => 'tincan_lrs_tincan_agent_access',
    'module' => 'tincan_lrs',
    'admin ui' => array(
        'path' => 'tincan_agent',
        'controller class' => 'TincanAgentUIController',
       ),
  );  

  // Tincan Activity 
  $return['tincan_activity'] = array(
    'label' => t('Tincan Activity'),
    'entity class' => 'TincanActivity',
    'controller class' => 'TincanActivityController',
    'metadata controller class' => 'TincanActivityMetadataController',
    'views controller class' => 'TincanActivityDefaultViewsController',
    'extra fields controller class' => 'TincanActivityExtraFieldsController',
    'base table' => 'tincan_activity',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'activity_id' => 'activity_id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'tincan_lrs_activity_create',
    'access callback' => 'tincan_lrs_tincan_activity_access',
    'module' => 'tincan_lrs',
    'admin ui' => array(
        'path' => 'tincan_activity',
        'controller class' => 'TincanActivityUIController',
       ),
  );
  
  // Tincan State
  $return['tincan_state'] = array(
    'label' => t('Tincan State'),
    'entity class' => 'TincanState',
    'controller class' => 'TincanStateController',
    'metadata controller class' => 'TincanStateMetadataController',
    'views controller class' => 'TincanStateDefaultViewsController',
    'extra fields controller class' => 'TincanStateExtraFieldsController',
    'base table' => 'tincan_state',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'state_id' => 'state_id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'tincan_lrs_state_create',
    'access callback' => 'tincan_lrs_tincan_state_access',
    'module' => 'tincan_lrs',
    'admin ui' => array(
        'path' => 'tincan_state',
        'controller class' => 'TincanStateUIController',
       ),
  );
  
  // Tincan Activity Profile
  $return['tincan_activity_profile'] = array(
    'label' => t('Tincan Activity Profile'),
    'entity class' => 'TincanActivityProfile',
    'controller class' => 'TincanActivityProfileController',
    'metadata controller class' => 'TincanActivityProfileMetadataController',
    'views controller class' => 'TincanActivityProfileDefaultViewsController',
    'extra fields controller class' => 'TincanActivityProfileExtraFieldsController',
    'base table' => 'tincan_activity_profile',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'profile_id' => 'profile_id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'tincan_lrs_activity_profile_create',
    'access callback' => 'tincan_lrs_tincan_activity_profile_access',
    'module' => 'tincan_lrs',
    'admin ui' => array(
        'path' => 'tincan_activity_profile',
        'controller class' => 'TincanActivityProfileUIController',
       ),
  );
  
  // Tincan Agent Profile
  $return['tincan_agent_profile'] = array(
    'label' => t('Tincan Agent Profile'),
    'entity class' => 'TincanAgentProfile',
    'controller class' => 'TincanAgentProfileController',
    'metadata controller class' => 'TincanAgentProfileMetadataController',
    'views controller class' => 'TincanAgentProfileDefaultViewsController',
    'extra fields controller class' => 'TincanAgentProfileExtraFieldsController',
    'base table' => 'tincan_agent_profile',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'id',
        'profile_id' => 'profile_id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'tincan_lrs_agent_profile_create',
    'access callback' => 'tincan_lrs_tincan_agent_profile_access',
    'module' => 'tincan_lrs',
    'admin ui' => array(
        'path' => 'tincan_agent_profile',
        'controller class' => 'TincanAgentProfileUIController',
       ),
  );
  
return $return;
}

/*Statement properties getter functions */
function tincan_lrs_verb_id_property_get($tincan_statement, array $options, $name, $type, $info) {
//dsm($tincan_statement);
//dsm($name);
//dsm($type);
//dsm($info);

  if(isset($tincan_statement->json)){
    $json_array = drupal_json_decode($tincan_statement->json);
    if(isset($json_array['verb']['id'])) {
      return $json_array['verb']['id'];
    }
    else return 'no verb id';
  }
  else return 'no json';
}


function _tincan_lrs_basic_json_validation($json,$context) {
  $array = drupal_json_decode($json);
  $json_result = json_last_error();
  switch ($json_result) {
    case JSON_ERROR_NONE:
      return TRUE;
    break;
    case JSON_ERROR_DEPTH:
      watchdog('lrs-json-validation','Maximum stack depth exceeded. Context: %d', array('%d' => $context), WATCHDOG_DEBUG);
      return FALSE;
    break;
    case JSON_ERROR_STATE_MISMATCH:
      watchdog('lrs-json-validation','Underflow or the modes mismatch. Context: %d', array('%d' => $context), WATCHDOG_DEBUG);
      return FALSE;
    break;
    case JSON_ERROR_CTRL_CHAR:
      watchdog('lrs-json-validation','Unexpected control character found. Context: %d', array('%d' => $context), WATCHDOG_DEBUG);
      return FALSE;
    break;
    case JSON_ERROR_SYNTAX:
      watchdog('lrs-json-validation','Syntax error, malformed JSON. Context: %d', array('%d' => $context), WATCHDOG_DEBUG);
      return FALSE;
    break;
    case JSON_ERROR_UTF8:
      watchdog('lrs-json-validation','Malformed UTF-8 characters, possibly incorrectly encoded. Context: %d', array('%d' => $context), WATCHDOG_DEBUG);
      return FALSE;
    break;
    default:
      watchdog('lrs-json-validation','Unknown error. Context: %d', array('%d' => $context), WATCHDOG_DEBUG);
      return FALSE;
    break;
  }
}

/**
 * Create a TincanStatement object.
 */
function tincan_lrs_statement_create($values = array()) {
  return entity_get_controller('tincan_statement')->create($values);
}

function tincan_lrs_tincan_statement_access() {
 return user_access('view tincan statements');
}

function tincan_lrs_tincan_statement_page_title($id) {
  return $id;
}
/* 
 * Processor for GET requests to resource "statements"
 */
function _tincan_lrs_statement_get_processor($content, $params, $statementId = FALSE) {
 watchdog('lrs state get handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs state get handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'tincan_statement');
  
  if(isset($parameters['statementId'])) {
    $query->propertyCondition('statement_id', $params['statementId']);
  }
 
  $results = $query->execute();

  if(isset($results['tincan_statement']) && count($results['tincan_statement'])){
    $statements = array();
    $eids = array();
    
    foreach($results['tincan_statement'] as $key => $result) {
      $eids[] = $key;
    }
    
    $entities = entity_load('tincan_statement',$eids);
    
    foreach($entities as $entity) {
      $statements[] = drupal_json_decode($entity->json);
    }
    if(count($statements) == 1) {
      return drupal_json_encode($statements[0]);
    }
    else {
      return drupal_json_encode($statements);
    }
  }
}

/* 
 * Processor for PUT requests to resource "statements"
 */
function _tincan_lrs_statement_put_processor($content, $params, $statementId='') {
  watchdog('lrs statement put handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs statement put handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);
  $statement_json = $content;
  $tincan_statement = array();
  $tincan_statement['json'] = $statement_json;
  if ($statementId != '') $tincan_statement['statement_id'] = $statementId;


  $tincan_statement_entity = tincan_lrs_statement_create($tincan_statement);
 
  $tincan_statement_entity->populateEntityValues();
  
  $entity = $tincan_statement_entity->save();
  
   watchdog('lrs','Tincan Statement Entity:<pre>%d</pre>',array('%d' =>  print_r($tincan_statement_entity, 1)), WATCHDOG_DEBUG);
   return $tincan_statement_entity->json;
}

/* 
 * Processor for POST requests to resource "statements"
 */
function _tincan_lrs_statement_post_processor($content, $params) {
  return $content;
}



/**
 * Create a TincanAgent object.
 */
function tincan_lrs_agent_create($values = array()) {
  return entity_get_controller('tincan_agent')->create($values);
}

function tincan_lrs_tincan_agent_access() {
 return user_access('view tincan agents');
}

function  _tincan_lrs_agents_get_processor($params) {
  return 'Agents get: '; 
}

/**
 * Create a TincanActivity object.
 */
function tincan_lrs_activity_create($values = array()) {
  return entity_get_controller('tincan_activity')->create($values);
}

function tincan_lrs_tincan_activity_access() {
 return user_access('view tincan activities');
}

/*
 * Processor for GET requests to resource "activities"
 */ 
function  _tincan_lrs_activity_get_processor($params, $activityId = '') {
  $activityId = isset($params['activityId']) ? $params['activityId'] : FALSE;
  return 'Activities get: ' . $activityId; 
}


/*
 * Create a TincanState object.
 */
function tincan_lrs_state_create($values = array()) {
  return entity_get_controller('tincan_state')->create($values);
}

function tincan_lrs_tincan_state_access() {
 return user_access('view tincan states');
}

function _tincan_lrs_tincan_find_state($activityId, $agent_json, $registration, $stateId) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','tincan_state');
  if($activityId) $query->propertyCondition('activity_id', $activityId);
  if($registration) $query->propertyCondition('registration', $registration);
  if($stateId) $query->propertyCondition('state_id', $stateId);
 
  if($agent_json) {
    $temp_state = tincan_lrs_state_create();
    $agent_id = $temp_state->findAgent($agent_json);
    if($agent_id) {
      $query->fieldCondition('tincan_agent', 'target_id', $agent_id, '=');
    }
    else return 0;  
  }
  
  $result = $query->execute();

  if(isset($result['tincan_state'])) {
    foreach($result['tincan_state'] as $key => $agent) {
      return $key;
    }
  }
  else return 0;
}

/* 
 * Processor for GET requests to resource "activities", with url parameter "state"
 */
function _tincan_lrs_activity_state_get_processor($params, $stateId = '') {
  watchdog('lrs state get handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  if(!$stateId) {
    $stateId = isset($params['stateId']) ? $params['stateId'] : FALSE;
  }
  $activityId = isset($params['activityId']) ? $params['activityId'] : FALSE;
  $agent_json = isset($params['agent']) ? $params['agent'] : FALSE;
  $registration = isset($params['registration']) ? $params['registration'] : FALSE;
  
  $eid = _tincan_lrs_tincan_find_state($activityId, $agent_json, $registration, $stateId);
  if($eid) {
    $state_entity = entity_load_single('tincan_state', $eid);
    watchdog('lrs state get handler', 'found contents: <pre>%d</pre>', array('%d' => print_r($state_entity->contents,1)), WATCHDOG_DEBUG);
    $return = array();
    $return['binary'] = $state_entity->contents;
    return $return;
    
  }
  else {
    return 'no activity states found';
  }
}

/* 
 * Processor for PUT requests to resource "activities", with url parameter "state"
 */
function _tincan_lrs_activity_state_put_processor($params, $content, $stateId = FALSE) {
  watchdog('lrs state put handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs state put handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);
  
  if(!$stateId) {
    $stateId = isset($params['stateId']) ? $params['stateId'] : FALSE;
  }
  $activityId = isset($params['activityId']) ? $params['activityId'] : FALSE;
  $agent_json = isset($params['agent']) ? $params['agent'] : FALSE;
  $registration = isset($params['registration']) ? $params['registration'] : FALSE;
  $document = isset($params['content']) ? $params['content'] : FALSE;
  $eid = _tincan_lrs_tincan_find_state($activityId, $agent_json, $registration, $stateId);
  watchdog('lrs state put handler', 'EID: <pre>%d</pre>', array('%d' => $eid), WATCHDOG_DEBUG);
  
  if($eid) {
    $state_entity = entity_load_single('tincan_state', $eid);
    $state_entity->updated = strtotime("now");
    if($document) $state_entity->contents = $document; 
    
  }
  else {
    $values = array();
    if($activityId) $values['activity_id'] = $activityId;
    if($registration) $values['registration'] = $registration;
    if($stateId) $values['state_id'] = $stateId;
    $values['stored'] = strtotime("now");
    $values['updated'] = strtotime("now");
    if($document) $values['contents'] = $document; 
    $state_entity = tincan_lrs_state_create($values);
    if($agent_json) {
      $agent_id = $state_entity->findAgent($agent_json);
      if($agent_id) {
        $state_entity->tincan_agent[LANGUAGE_NONE][0]['target_id'] = $agent_id;
      }
      else {
        $agent_id = $state_entity->createAgent($agent_json);
        $state_entity->tincan_agent[LANGUAGE_NONE][0]['target_id'] = $agent_id;
      }
    }
   
  }
  try {
    $state_entity->save();
  }
  catch(Exception $e) {
    watchdog('lrs state put handler', 'Entity create error: <pre>%d</pre>', array('%d' => $e->getMessage()), WATCHDOG_DEBUG);
    return 'fail: ' . $e->getMessage();
  }
  return 'success';
  
} 
 
/* 
 * Processor for POST requests to resource "activities", with url parameter "state"
 */
function _tincan_lrs_activity_state_post_processor($params, $content) {
  watchdog('lrs state post handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs state post handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);
  return 'activity state post';
}

/* 
 * Processor for DELETE requests to resource "activities", with url parameter "state"
 */
function _tincan_lrs_activity_state_delete_processor($params, $content, $stateId = '') {
  watchdog('lrs state delete handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs state delete handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);
  return 'activity state delete';
}

/**
 * Create a TincanActivityProfile object.
 */
function tincan_lrs_activity_profile_create($values = array()) {
  return entity_get_controller('tincan_activity_profile')->create($values);
}

function tincan_lrs_tincan_activity_profile_access() {
 return user_access('view tincan activity profiles');
}

/* 
 * Processor for GET requests to resource "activities", with url parameter "profile"
 */
function _tincan_lrs_activity_profiles_get_processor($params, $profileId = '') {
  if($profileId == '') $profileId = isset($params['profileId']) ? $params['profileId'] : FALSE;
  watchdog('lrs activity profile get handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  
  return 'Activities Profile (get): ' . $profileId;
}

/* 
 * Processor for PUT requests to resource "activities", with url parameter "profile"
 */
function _tincan_lrs_activity_profiles_put_processor($params, $content, $profileId = '') {
  watchdog('lrs activity profile put handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs activity profile put handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);

  return 'activity profile put';
}

/* 
 * Processor for POST requests to resource "activities", with url parameter "profile"
 */
function _tincan_lrs_activity_profiles_post_processor($params, $content) {
  watchdog('lrs activity profile post handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs activity profile post handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);

  return 'activity profile post';
}

/* 
 * Processor for DELETE requests to resource "activities", with url parameter "profile"
 */
function _tincan_lrs_activity_profiles_delete_processor($params, $content, $profileId = '') {
  watchdog('lrs activity profile delete handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs activity profile delete handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);

  return 'activity profile delete';
} 

/**
 * Create a TincanAgentProfile object.
 */
function tincan_lrs_agent_profile_create($values = array()) {
  return entity_get_controller('tincan_agent_profile')->create($values);
}

function tincan_lrs_tincan_agent_profile_access() {
 return user_access('view tincan agent profiles');
}

/* 
 * Processor for GET requests to resource "agents", with url parameter "profile"
 */
function _tincan_lrs_agent_profiles_get_processor($params) {
  watchdog('lrs agent profile get handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
 

  $profileId = isset($params['profileId']) ? $params['profileId'] : FALSE;
  return '(GET) Agents Profile: ' . $profileId;
}

/* 
 * Processor for PUT requests to resource "agents", with url parameter "profile"
 */
function _tincan_lrs_agent_profiles_put_processor($params, $content, $profileId = FALSE) {
   watchdog('lrs agent profile put handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
   watchdog('lrs agent profile put handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);

   return 'Agents Profile PUT: ';
}

/* 
 * Processor for POST requests to resource "agents", with url parameter "profile"
 */
function _tincan_lrs_agent_profiles_post_processor($params, $content) {
  watchdog('lrs agent profile post handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs agent profile post handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);

  return 'agent profile post';
}

/* 
 * Processor for DELETE requests to resource "agents", with url parameter "profile"
 */
function _tincan_lrs_agent_profiles_delete_processor($params, $content, $profileId = '') {
  watchdog('lrs agent profile delete handler', 'Params: <pre>%d</pre>', array('%d' => print_r($params,1)), WATCHDOG_DEBUG);
  watchdog('lrs agent profile delete handler', 'Content: <pre>%d</pre>', array('%d' => print_r($content,1)), WATCHDOG_DEBUG);

  return 'agent profile delete';
} 